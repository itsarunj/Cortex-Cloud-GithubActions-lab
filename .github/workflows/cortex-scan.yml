name: Cortex Cloud Code Scan & Azure Deployment

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  # The manual 'workflow_dispatch' trigger and its inputs have been removed.
  # The workflow will now be fully automated by push and pull_request events.

jobs:
  code-scan:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Source Code
        uses: actions/checkout@v4
      
      - name: Download cortexcli
        id: download-cli
        run: |
          response=$(curl --location 'https://api-tac-x5.xdr.sg.paloaltonetworks.com/public_api/v1/unified-cli/releases/download-link?os=linux&architecture=amd64' \
            --header 'Authorization: ${{ secrets.CORTEX_API_KEY }}' \
            --header 'x-xdr-auth-id: ${{ secrets.CORTEX_API_KEY_ID }}' \
            --silent)
          
          downloadUrl=$(echo "${response}" | jq -r '.signed_url')
          
          curl -o cortexcli "${downloadUrl}"
          chmod +x cortexcli
          ./cortexcli --version
          
      - name: Run Scan
        run: |
          # The repo-id is now automatically set using the GITHUB_REPOSITORY environment variable.
          ./cortexcli \
            --api-base-url "https://api-tac-x5.xdr.sg.paloaltonetworks.com" \
            --api-key "${{ secrets.CORTEX_API_KEY }}" \
            --api-key-id "${{ secrets.CORTEX_API_KEY_ID }}" \
            code scan \
            --directory "$(pwd)" \
            --repo-id "${{ github.repository }}" \
            --branch "${{ github.ref_name }}" \
            --source "GITHUB_ACTIONS" \
            --create-repo-if-missing

  terraform-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Source Code
        uses: actions/checkout@v4

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
          # The subscription ID is now explicitly passed to the login action.
          # This action will automatically set the ARM_SUBSCRIPTION_ID environment variable.
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Path in working directory
        run: pwd
        working-directory: 'terraform/azure/'

      - name: List files in working directory
        run: ls -la
        working-directory: 'terraform/azure/'

        
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2

      - name: Terraform Init
        run: terraform init
        working-directory: 'terraform/azure/'

      - name: Terraform Plan
        run: |
          terraform plan -input=false -out=tfplan \
          -var="github_username=${{ github.repository }}" \
          -var="admin_password=${{ secrets.ADMIN_PASSWORD }}"
        working-directory: 'terraform/azure/'

      - name: Terraform Apply
        run: terraform apply -auto-approve "tfplan"
        working-directory: 'terraform/azure/'

        

  # The job below is commented out as you requested.
  # This can be used later to destroy the resources for cleanup.
  # terraform-destroy:
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Checkout Source Code
  #       uses: actions/checkout@v4
  # 
  #     - name: Azure Login
  #       uses: azure/login@v1
  #       with:
  #         creds: ${{ secrets.AZURE_CREDENTIALS }}
  # 
  #     - name: Setup Terraform
  #       uses: hashicorp/setup-terraform@v2
  # 
  #     - name: Terraform Init
  #       run: terraform init
  #       working-directory: 'terraform/azure/'
  # 
  #     - name: Terraform Destroy
  #       run: terraform destroy -auto-approve "tfplan"
  #       working-directory: 'terraform/azure/'
